print(x$f_char)
if (ll == 8) {
cat(nl[8], ":\n")
print(x$qdc[1:dimstats, ])
if (dimstats < x$brief$nstat)  cat(" (...) See item '...$qdc' for the full data.\n")
}
invisible(x)
}
print(results, length=2)
print(results, length=10)
print(results, length=50)
getOtptions(digits)
getOptions(digits)
options(digits)
getOption("digits")
print(results, length=50, digits=1)
getOption("digits")
print.QmethodRes <- function(x, length=10, digits=2, ...) {
old.dig <- getOption("digits")
options(digits=digits)
nn <- c("Summary", "Original data", "Q-sort factor loadings", "Flagged Q-sorts", "Statement z-scores", "Statement factor scores", "Factor characteristics", "Distinguishing and consensus statements")
names(nn) <- c("brief", "dataset", "loa", "flagged", "zsc", "zsc_n", "f_char", "qdc")
ll <- length(x)
nl <- nn[1:ll]
dimsorts <- min(length, x$brief$nqsorts)
dimstats <- min(length, x$brief$nstat)
cat(x$brief$info, sep="\n")
cat("\n")
cat(nl[2], ":\n")
print(x$dataset[1:dimstats, 1:dimsorts])
if (dimstats < x$brief$nstat) cat(" (...) See item '...$dataset' for the full data.\n")
nxt <- c("loa", "flagged")
for (i in nxt) {
cat("\n")
cat(nl[i], ":\n")
print(x[[i]][1:dimsorts, ])
if (dimsorts < x$brief$nqsorts) cat(" (...) See item '...$", i, "' for the full data.\n", sep="")
}
nxt <- c("zsc", "zsc_n")
for (i in nxt) {
cat("\n")
cat(nl[i], ":\n")
print(x[[i]][1:dimstats, ])
if (dimstats < x$brief$nstat) cat(" (...) See item '...$", i, "' for the full data.\n", sep="")
}
cat("\n", nl[7], ":\n")
print(x$f_char)
if (ll == 8) {
cat(nl[8], ":\n")
print(x$qdc[1:dimstats, ])
if (dimstats < x$brief$nstat)  cat(" (...) See item '...$qdc' for the full data.\n")
}
options(digits=old.dig)
invisible(x)
}
getOption("digits")
print(results, length=50, digits=4)
getOption("digits")
#calculates final z-scores and factor scores, and extracts main results for Q method
qzscores <- function(dataset, nfactors, loa=loa, flagged=flagged, forced=TRUE, distribution=NA) {
# calculate number of Q sorts and number of statements
nstat <- nrow(dataset)
nqsorts <- ncol(dataset)
#A. select FLAGGED Q sorts
floa <- flagged*loa #as.data.frame(loa); floa[which(!flagged, arr.ind=T)] <- 0 # the latter does not work in old versions of R
#B. calculate FACTOR WEIGHTS for each Q sort, in a new matrix -needs to be a data.frame to perform variable calculations
fwe <- as.data.frame(apply(floa, 2, function(x) x/(1-x^2)))
#C. calculate Z-SCORES for each sentence and factor
#-- new matrix for wsubm*ssubmn (original matrix * q sort factor weight), and transpose
wraw_all <- list()
n <- 1
for (i in fwe) {
wraw_all[[n]] <- t(t(dataset)*i)
names(wraw_all[[n]]) <- paste("wraw_",n,sep="")
wraw_all[[n]] <- as.data.frame(wraw_all[[n]])
n <- n+1
}
#-- sums, average and stdev for each statement
zsc_sum <- data.frame(cbind(1:nstat))
zsc_mea <- data.frame(cbind(1:nstat))
zsc_std <- data.frame(cbind(1:nstat))
row.names(zsc_sum) <- row.names(dataset)
row.names(zsc_mea) <- row.names(dataset)
row.names(zsc_std) <- row.names(dataset)
n <- 1
while (n <= length(floa)) {
zsc_sum[,n] <-      rowSums(wraw_all[[n]])
zsc_mea[,n] <- mean(rowSums(wraw_all[[n]]))
zsc_std[,n] <-   sd(rowSums(wraw_all[[n]]))
n <- n+1
}
colnames(zsc_sum) <- paste("z_sum_",c(1:length(floa)),sep="")
colnames(zsc_mea) <- paste("z_mea_",c(1:length(floa)),sep="")
colnames(zsc_std) <- paste("z_std_",c(1:length(floa)),sep="")
#-- z-scores for each statement
zsc <- data.frame(cbind(1:nstat))
row.names(zsc) <- row.names(dataset)
n <- 1
while (n <= length(floa)) {
zsc[,n] <- (zsc_sum[,n]-zsc_mea[,n])/zsc_std[,n]
n <- n+1
}
colnames(zsc) <- paste("zsc_f",c(1:length(floa)),sep="")
#D. FACTOR SCORES: rounded z-scores
if (forced) {
qscores <- sort(dataset[,1], decreasing=FALSE)
} else {
qscores <- sort(distribution, decreasing=FALSE)
if (length(distribution) != nrow(dataset) | (class(distribution)[1] != "numeric" & class(distribution) != "integer")) stop("Q method input: The distribution of items was set as non-forced and the distribution provided is not suitable (it is the wrong length or it is non numerical)")
}
zsc_n <- as.data.frame(zsc)
f <- 1
while (f <= length(floa)) {
if (length(unique(zsc[,f])) == length(zsc[,f])) {
zsc_n[,f] <- qscores[rank(zsc[,f])]
} else {
zsc_n[,f] <- qscores[rank(zsc[,f])]
# statements with identical z-score
izsc <- which(round(rank(zsc[,f])) != rank(zsc[,f]))
uizsc <- unique(zsc[izsc,f])
for (g in uizsc) {
izscn <- which(zsc[,f] == g)
zsc_n[izscn,f] <- min(zsc_n[izscn,f])
}
}
f <- f+1
}
colnames(zsc_n) <- paste("fsc_f",c(1:length(floa)),sep="")
#E. FACTOR CHARACTERISTICS
f_char <- qfcharact(loa, flagged, nqsorts, zsc, nfactors, floa)
#F. FINAL OUTPUTS
brief <- paste0("z-scores calculated on ", date(), ". Original data: ", nstat, " statements, ", nqsorts, " Q-sorts. Number of factors: ",nfactors,".")
qmethodresults <- list()
qmethodresults[[1]] <- brief
qmethodresults[[2]] <- dataset
qmethodresults[[3]] <- loa
qmethodresults[[4]] <- flagged
qmethodresults[[5]] <- zsc
qmethodresults[[6]] <- zsc_n
qmethodresults[[7]] <- f_char
names(qmethodresults) <- c("brief", "dataset", "loa", "flagged", "zsc", "zsc_n", "f_char")
class(qmethodresults) <- "QmethodRes"
return(qmethodresults)
}
summary.QmethodRes <- function(object, ...) {
print(object[1], quote=FALSE)
print(object[6], quote=FALSE)
fch <- t(object[[7]][[1]])
rownames(fch) <- c(
"Average reliability coefficient",
"Number of loading Q-sorts",
"Eigenvalues",
"Percentage of explained variance",
"Composite reliability",
"Standard error of factor scores")
print(fch, quote=FALSE, digits=2)
}
#flags Q sorts automatically according to the given loadings matrix
qflag <- function(loa=loa, nstat) {
# calculate number of Q sorts and number of statements
nqsorts <- nrow(loa)
#FLAGGING CRITERIA:
# -- 1) qsorts which factor loading is higher than the threshold for pval >0.95, and
# -- 2) qsorts which square loading is higher than the sum of square loadings of the same q-sort in all other factors
thold.05 <- 1.96/sqrt(nstat)
loa_sq <- loa^2
flagged <- data.frame(cbind(1:nqsorts))
flagged[,1] <- as.logical(flagged[,1])
f <- 1
while (f <= length(loa)) {
n <- 1
while (n <= nqsorts) {
flagged[n,f] <- loa_sq[n,f] > (rowSums(loa_sq)[[n]]-loa_sq[n,f]) & abs(loa[n,f]) > thold.05
n <- n+1
}
f <- f+1
}
names(flagged) <- paste("flag_f",1:length(loa), sep="")
row.names(flagged) <- row.names(loa)
return(flagged)
}
qfcharact <- function(loa, flagged, zsc, nfactors, floa, av_rel_coef=0.8) {
nqsorts <- nrow(loa)
loa_sq <- loa^2
#number of loading q-sorts
nload <- colSums(flagged)
#Eigenvalues
eigenvals <- colSums(loa_sq)
#Total explained variance
expl_var <- 100*(eigenvals/nqsorts)
#Reliability
reliability <- av_rel_coef*nload/(1+(nload-1)*av_rel_coef)
#Standard Error of Factor Scores
se_fscores <- sapply(zsc, sd)*sqrt(1-reliability)
#FACTOR MATRIXES
#correlation among factors
f_cor <- cor(zsc)
#SE of differences
sed <- matrix(data = NA, nrow = nfactors, ncol = nfactors)
colnames(sed) <- paste("f", 1:nfactors, sep="")
row.names(sed) <- paste("f", 1:nfactors, sep="")
f <- 1
while (f <= length(floa)) {
g <- 1
while (g <= length(floa)) {
sed[f,g] <- sqrt(se_fscores[[f]]^2 + se_fscores[[g]]^2)
g <- g+1
}
f <- f+1
}
#Bind all together
f_char <- list()
f_char[[1]] <- data.frame(cbind(av_rel_coef, nload, eigenvals, expl_var, reliability, se_fscores))
row.names(f_char[[1]]) <- paste("f",1:length(loa), sep="")
f_char[[2]] <- f_cor
f_char[[3]] <- sed
names(f_char) <- cbind("characteristics", "cor_zsc", "sd_dif")
#cbind("Average reliability coefficient, Number of loading Q-sorts, Eigenvalues, Percentage of explained variance, Composite reliability, Standard error of factor scores", "Correlation coefficients between factors z-scores", "Standard errors of differences")
return(f_char)
}
qdc <- function(dataset, nfactors, zsc, sed) {
if (nfactors==1) {
qdc.res <- "Warning: Only one factor selected. No distinguishing and consensus statements will be calculated."
print(qdc.res, quote = FALSE)
} else {
# Distinguishing and consensus statements
# create data frame
comparisons <- combn(nfactors, 2, simplify=F)
comp <- vector()
for (i in 1:length(comparisons)) {
comp <- append(comp, paste("f", comparisons[[i]], collapse="_", sep=""), after = length(comp))
}
qdc1 <- data.frame(matrix(data=as.numeric(NA), ncol=length(comp), nrow=nrow(dataset), dimnames=list(row.names(dataset), comp)))
# differences in zsc between factors
for (n in 1:length(comp)) {
first <-  names(zsc)[grep(paste0("f", comparisons[[n]][1]),
names(zsc))]
second <- names(zsc)[grep(paste0("f", comparisons[[n]][2]),
names(zsc))]
qdc1[n] <- abs(zsc[first] - zsc[second])
}
qdc2 <- as.data.frame(qdc1)
# significant differences
for (n in 1:length(comp)) {
# find the threshold for the pair of factors
sed <- data.frame(sed)
first <-  names(sed)[grep(paste0("f", comparisons[[n]][1]),
names(sed))]
second <- names(sed)[grep(paste0("f", comparisons[[n]][2]),
names(sed))]
sedth.01 <- sed[first, second]*2.58
sedth.05 <- sed[first, second]*1.96 # differences are significant when > 2.58*SED for p < .01, or the same value rounded upwards (Brown, 1980, pp.245)
qdc2[which(abs(qdc1[[n]]) <= sedth.05), n] <- ""
qdc2[which(abs(qdc1[[n]]) >  sedth.05), n] <- "*"
qdc2[which(abs(qdc1[[n]]) >  sedth.01), n] <- "**"
}
names(qdc2) <- paste0("sig_",names(qdc2))
qdc2$dist.and.cons <- as.character(apply(qdc2, 1, function(x) sum(x!="")==0))
qdc2[which(qdc2$dist.and.cons == T), "dist.and.cons"] <- "Consensus"
if (nfactors == 2) {
qdc2[which(qdc2$dist.and.cons != "Consensus"), "dist.and.cons"] <- "Distinguishing"
}
if (nfactors > 2) {
qdc2[which(qdc2$dist.and.cons != "Consensus"), "dist.and.cons"] <- ""
for (i in 1:nfactors) {
varsin  <- names(qdc2)[grep(i, names(qdc2))]
varsout <- names(qdc2)[-grep(i, names(qdc2))]
varsout <- varsout[-which(varsout=="dist.and.cons")]
for (s in 1:nrow(qdc2)) {
if (sum(qdc2[s, varsin] != "") == length(varsin) & sum(qdc2[s, varsout] != "") == 0) qdc2[s, "dist.and.cons"] <- paste0("Distinguishes f",i, " only") else if (sum(qdc2[s, c(varsin, varsout)] != "") == length(qdc1)) qdc2[s, "dist.and.cons"] <- "Distinguishes all" else if (sum(qdc2[s, varsin] != "") == length(varsin) & sum(qdc2[s, varsout] != "") != 0 & sum(qdc2[s, c(varsin, varsout)] != "") != length(qdc1)) qdc2[s, "dist.and.cons"] <- paste0(qdc2[s, "dist.and.cons"], "Distinguishes f",i, " ", collapse="")
}
#The above loop assigns these values in the column dist.and.cons, according to the following rules:
# -- "Distinguishes f* only" when the differences of f* with all other factors are significant, AND all other differences are not.
# -- "Distinguishes all" when all differences are significant.
# -- "Distinguishes f*" when the differences of f* and all other factors are significant, AND some (but not all) of the other differences are significant.
# -- "" leaves empty those which do not fullfil any of the above conditions, i.e. are not consensus neither are clearly distinguishing any factor.
}
}
qdc.res <- cbind(qdc1, qdc2)
ord <- rep(1:length(qdc1), each=2)
ord[which(1:(length(qdc1)*2) %% 2 == 0)] <- ord[which(1:(length(qdc1)*2) %% 2 == 0)] + length(qdc1)
qdc.res <- qdc.res[c(length(qdc.res), ord)]
}
return(qdc.res)
}
qmethod <- function(dataset, nfactors, rotation="varimax", forced=T, distribution=NA, cor.method="pearson") {
# calculate number of Q sorts and number of statements
nstat <- nrow(dataset)
nqsorts <- ncol(dataset)
#threshold for significant values at p-value=.01 and p-value=.05
thold.01 <- 2.58/sqrt(nstat)
thold.05 <- 1.96/sqrt(nstat)
#check that the input data is correct
#if (nqsorts!=ncol(dataset)) stop("Q method input: The number of Q sorts introduced does not match with the number of columns of the data frame or matrix") else if (nstat!=nrow(dataset)) stop("Q method input: The number of statements introduced does not match with the number of rows of the data frame or matrix.") else
if (nstat < 2) stop("Q method input: The data frame or matrix entered has less than two statements") else if (nqsorts < 2) stop("Q method input: The data frame or matrix entered has less than two Q-sorts") else if (!is.integer(as.matrix(dataset))) stop("Q method input: The data frame or matrix entered has non numeric values.") else {
cor.data <- cor(dataset, method=cor.method)
loa <- as.data.frame(unclass(principal(cor.data, nfactors=nfactors, rotate=rotation)$loadings)) #PCA from {psych} for factor loadings
names(loa) <- paste0("f", 1:length(loa))
# The following depends on the qmethod functions: qflag, qzscores, qfcharact, qdc
flagged <- qflag(loa=loa, nstat=nstat)
qmethodresults <- qzscores(dataset, nfactors, flagged=flagged, loa=loa, forced=forced, distribution=distribution)
brief <- list()
brief$date <- date()
brief$nstat <- nstat
brief$nqsorts <- nqsorts
brief$nfactors <- nfactors
brief$rotation <- rotation
brief$cor.method <- cor.method
brief$info <- c("Q-method analysis.",
paste0("Finished on:             ", brief$date),
paste0("Original data:           ", brief$nstat, " statements, ", brief$nqsorts, " Q-sorts"),
paste0("Number of factors:       ", brief$nfactors),
paste0("Rotation:                ", brief$rotation),
paste0("Flagging:                automatic"),
paste0("Correlation coefficient: ", brief$cor.method))
qmethodresults[[1]] <- brief
qmethodresults[[8]] <- qdc(dataset, nfactors, zsc=qmethodresults[[5]], sed=as.data.frame(qmethodresults[[7]][[3]]))
names(qmethodresults)[8] <- "qdc"
}
cat(qmethodresults$brief$info, sep="\n")
# Will this cat() fill the screen when applying bootstrap?
return(qmethodresults)
}
plot.QmethodRes <- function(x,
xlab='z-scores', ylab='statements',
pchlist=NULL, colours=NULL,
fnames=NULL, legend=T, ...) {
dfr <- x$zsc
lowlim <- floor(min(dfr[[1]]))
highlim <- ceiling(max(dfr))
if (is.null(pchlist)) pchlist <- c(1, 2, 0, 5, 6, 16, 17, 15, 18, 21, 24, 23, 22, 3, 4, 7, 8, 9)
nfactors <- length(dfr)
dfr <- dfr[order(apply(dfr, 1, sd)), ]
if (is.null(colours)) colours <- rainbow(length(dfr))
if (is.null(fnames)) fnames <- paste0("Factor ", 1:nfactors)
dotchart(dfr[[1]], lcolor=grey(0.4),
xlim=c(lowlim, highlim),
ylab=ylab, xlab=xlab, axis=NULL,
pch=pchlist[[1]], color=colours[[1]], ...)
for (i in 2:nfactors){
points(x=dfr[[i]], 1:length(dfr[[i]]), pch = pchlist[i], type = "p", col=colours[[i]], ...)
}
axis(side=2, at=1:nrow(dfr),
labels=rownames(dfr),
las=1, tick=F, line=-0.5, ...)
abline(v=seq(from=lowlim, to=highlim, by=0.5), col=grey(0.6), lty=3)
if (legend) {
legend('bottomright',
legend=fnames,
col=colours[1:nfactors],
pch=pchlist[1:nfactors],
bty="n")
}
}
print.QmethodRes <- function(x, length=10, digits=2, ...) {
old.dig <- getOption("digits")
options(digits=digits)
nn <- c("Summary", "Original data", "Q-sort factor loadings", "Flagged Q-sorts", "Statement z-scores", "Statement factor scores", "Factor characteristics", "Distinguishing and consensus statements")
names(nn) <- c("brief", "dataset", "loa", "flagged", "zsc", "zsc_n", "f_char", "qdc")
ll <- length(x)
nl <- nn[1:ll]
dimsorts <- min(length, x$brief$nqsorts)
dimstats <- min(length, x$brief$nstat)
cat(x$brief$info, sep="\n")
cat("\n")
cat(nl[2], ":\n")
print(x$dataset[1:dimstats, 1:dimsorts])
if (dimstats < x$brief$nstat) cat(" (...) See item '...$dataset' for the full data.\n")
nxt <- c("loa", "flagged")
for (i in nxt) {
cat("\n")
cat(nl[i], ":\n")
print(x[[i]][1:dimsorts, ])
if (dimsorts < x$brief$nqsorts) cat(" (...) See item '...$", i, "' for the full data.\n", sep="")
}
nxt <- c("zsc", "zsc_n")
for (i in nxt) {
cat("\n")
cat(nl[i], ":\n")
print(x[[i]][1:dimstats, ])
if (dimstats < x$brief$nstat) cat(" (...) See item '...$", i, "' for the full data.\n", sep="")
}
cat("\n", nl[7], ":\n")
print(x$f_char)
if (ll == 8) {
cat(nl[8], ":\n")
print(x$qdc[1:dimstats, ])
if (dimstats < x$brief$nstat)  cat(" (...) See item '...$qdc' for the full data.\n")
}
options(digits=old.dig)
invisible(x)
}
summary.QmethodRes <- function(object, ...) {
cat(object$brief$info, sep="\n")
cat("\nFactor scores\n")
print(object[[6]], quote=FALSE)
fch <- t(object[[7]][[1]])
rownames(fch) <- c(
"Average reliability coefficient",
"Number of loading Q-sorts",
"Eigenvalues",
"Percentage of explained variance",
"Composite reliability",
"Standard error of factor scores")
print(fch, quote=FALSE, digits=2)
}
lipset
qmethod(lipset, nfactors=3)
loa
flagged
zsc
nfactors
floa
av_rel_coef=0.8
nqsorts <- nrow(loa)
loa_sq <- loa^2
nload <- colSums(flagged)
eigenvals <- colSums(loa_sq)
expl_var <- 100*(eigenvals/nqsorts)
reliability <- av_rel_coef*nload/(1+(nload-1)*av_rel_coef)
se_fscores <- sapply(zsc, sd)*sqrt(1-reliability)
f_cor <- cor(zsc)
sed <- matrix(data = NA, nrow = nfactors, ncol = nfactors)
colnames(sed) <- paste("f", 1:nfactors, sep="")
row.names(sed) <- paste("f", 1:nfactors, sep="")
f <- 1
while (f <= length(floa)) {
g <- 1
while (g <= length(floa)) {
sed[f,g] <- sqrt(se_fscores[[f]]^2 + se_fscores[[g]]^2)
g <- g+1
}
f <- f+1
}
f_char <- list()
f_char[[1]] <- data.frame(cbind(av_rel_coef, nload, eigenvals, expl_var, reliability, se_fscores))
row.names(f_char[[1]]) <- paste("f",1:length(loa), sep="")
f_char[[2]] <- f_cor
f_char[[3]] <- sed
names(f_char) <- cbind("characteristics", "cor_zsc", "sd_dif")
return(f_char)
dataset
nfactors
loa
flagged
forced=TRUE
distribution=NA
nstat <- nrow(dataset)
nqsorts <- ncol(dataset)
floa <- flagged*loa #as.data.frame(loa); floa[which(!flagged, arr.ind=T)] <- 0 # the latter does not work in old versions of R
fwe <- as.data.frame(apply(floa, 2, function(x) x/(1-x^2)))
wraw_all <- list()
n <- 1
for (i in fwe) {
wraw_all[[n]] <- t(t(dataset)*i)
names(wraw_all[[n]]) <- paste("wraw_",n,sep="")
wraw_all[[n]] <- as.data.frame(wraw_all[[n]])
n <- n+1
}
zsc_sum <- data.frame(cbind(1:nstat))
zsc_mea <- data.frame(cbind(1:nstat))
zsc_std <- data.frame(cbind(1:nstat))
row.names(zsc_sum) <- row.names(dataset)
row.names(zsc_mea) <- row.names(dataset)
row.names(zsc_std) <- row.names(dataset)
n <- 1
while (n <= length(floa)) {
zsc_sum[,n] <-      rowSums(wraw_all[[n]])
zsc_mea[,n] <- mean(rowSums(wraw_all[[n]]))
zsc_std[,n] <-   sd(rowSums(wraw_all[[n]]))
n <- n+1
}
colnames(zsc_sum) <- paste("z_sum_",c(1:length(floa)),sep="")
colnames(zsc_mea) <- paste("z_mea_",c(1:length(floa)),sep="")
colnames(zsc_std) <- paste("z_std_",c(1:length(floa)),sep="")
zsc <- data.frame(cbind(1:nstat))
row.names(zsc) <- row.names(dataset)
n <- 1
while (n <= length(floa)) {
zsc[,n] <- (zsc_sum[,n]-zsc_mea[,n])/zsc_std[,n]
n <- n+1
}
colnames(zsc) <- paste("zsc_f",c(1:length(floa)),sep="")
if (forced) {
qscores <- sort(dataset[,1], decreasing=FALSE)
} else {
qscores <- sort(distribution, decreasing=FALSE)
if (length(distribution) != nrow(dataset) | (class(distribution)[1] != "numeric" & class(distribution) != "integer")) stop("Q method input: The distribution of items was set as non-forced and the distribution provided is not suitable (it is the wrong length or it is non numerical)")
}
zsc_n <- as.data.frame(zsc)
f <- 1
while (f <= length(floa)) {
if (length(unique(zsc[,f])) == length(zsc[,f])) {
zsc_n[,f] <- qscores[rank(zsc[,f])]
} else {
zsc_n[,f] <- qscores[rank(zsc[,f])]
# statements with identical z-score
izsc <- which(round(rank(zsc[,f])) != rank(zsc[,f]))
uizsc <- unique(zsc[izsc,f])
for (g in uizsc) {
izscn <- which(zsc[,f] == g)
zsc_n[izscn,f] <- min(zsc_n[izscn,f])
}
}
f <- f+1
}
colnames(zsc_n) <- paste("fsc_f",c(1:length(floa)),sep="")
f_char <- qfcharact(loa, flagged, nqsorts, zsc, nfactors, floa)
loa
flagged
f_char <- qfcharact(loa, flagged, zsc, nfactors, floa)
f_char
