pqout[[10]] <- qmobject$"Statement rounded scores"
# Factor Q-Sort Values for Statements sorted by Consensus vs. Disagreement (Variance across Factor Z-Scores)
names(pqout)[[11]] <- "Factor Q-Sort Values for Statements sorted by Consensus vs. Disagreement (Variance across Factor Z-Scores)"
zsc <- qmobject$"Statement z-scores"
zsc.ord <- order(apply(zsc, 1, var))
pqout[[11]] <- qmobject$"Statement rounded scores"[zsc.ord,]
# Factor Characteristics
names(pqout)[[12]] <- "Factor Characteristics"
fch <- t(qmobject$"Factor characteristics"[[1]])
rownames(fch) <- c(
"Average reliability coefficient",
"Number of loading Q-sorts",
"Eigenvalues",
"Percentage of explained variance",
"Composite reliability",
"Standard error of factor scores")
pqout[[12]] <- round(fch, digits=2)
# Standard Errors for Differences in Factor Z-Scores
names(pqout)[[13]] <- "Standard Errors for Differences in Factor Z-Scores"
pqout[[13]] <- qmobject$"Factor characteristics"[[3]]
# Distinguishing Statements for Factor *
names(pqout)[[14]] <- "Distinguishing Statements "
dc <- qmobject$"Distinguishing and consensus statements"
zsc <- qmobject$"Statement z-scores"
pqout[[14]] <- as.list(1:nfactors)
for (i in 1:nfactors) {
names(pqout[[14]])[i] <- paste0("for Factor ", i)
d <- grep(paste0("f",i, "|all"), dc$dist.and.cons)
pqout[[14]][[i]] <- cbind(round(zsc[d, ], digits=2),dc[d, c(1,1+(2*(1:length(comparisons))))])
}
# Consensus Statements  --  Those That Do Not Distinguish Between ANY Pair of Factors.
names(pqout)[[15]] <- "Consensus Statements  --  Those That Do Not Distinguish Between ANY Pair of Factors."
dcon <- which(dc$dist.and.cons == "Consensus")
pqout[[15]] <- cbind(round(qmobject$"Statement z-scores"[dcon, ], digits=2),dc[dcon, c(1,1+(2*(1:length(comparisons))))])
return(pqout)
}
capture.output(pqmethod.output(qmobject), file=file)
}
}
#calculates final z-scores and factor scores, and extracts main results for Q method
qzscores <- function(dataset, nfactors, nstat, nqsorts, rotation="unknown", loa=loa, flagged=flagged, forced=TRUE, distribution=NA) {
#A. select FLAGGED Q sorts
floa <- flagged*loa #as.data.frame(loa); floa[which(!flagged, arr.ind=T)] <- 0 # the latter does not work in old versions of R
#B. calculate FACTOR WEIGHTS for each Q sort, in a new matrix -needs to be a data.frame to perform variable calculations
fwe <- as.data.frame(apply(floa, 2, function(x) x/(1-x^2)))
#C. calculate Z-SCORES for each sentence and factor
#-- new matrix for wsubm*ssubmn (original matrix * q sort factor weight), and transpose
wraw_all <- list()
n <- 1
for (i in fwe) {
wraw_all[[n]] <- t(t(dataset)*i)
names(wraw_all[[n]]) <- paste("wraw_",n,sep="")
wraw_all[[n]] <- as.data.frame(wraw_all[[n]])
n <- n+1
}
#-- sums, average and stdev for each statement
zsc_sum <- data.frame(cbind(1:nstat))
zsc_mea <- data.frame(cbind(1:nstat))
zsc_std <- data.frame(cbind(1:nstat))
row.names(zsc_sum) <- row.names(dataset)
row.names(zsc_mea) <- row.names(dataset)
row.names(zsc_std) <- row.names(dataset)
n <- 1
while (n <= length(floa)) {
zsc_sum[,n] <-      rowSums(wraw_all[[n]])
zsc_mea[,n] <- mean(rowSums(wraw_all[[n]]))
zsc_std[,n] <-   sd(rowSums(wraw_all[[n]]))
n <- n+1
}
colnames(zsc_sum) <- paste("z_sum_",c(1:length(floa)),sep="")
colnames(zsc_mea) <- paste("z_mea_",c(1:length(floa)),sep="")
colnames(zsc_std) <- paste("z_std_",c(1:length(floa)),sep="")
#-- z-scores for each statement
zsc <- data.frame(cbind(1:nstat))
row.names(zsc) <- row.names(dataset)
n <- 1
while (n <= length(floa)) {
zsc[,n] <- (zsc_sum[,n]-zsc_mea[,n])/zsc_std[,n]
n <- n+1
}
colnames(zsc) <- paste("zsc_f",c(1:length(floa)),sep="")
#D. FACTOR SCORES: rounded z-scores
if (forced) {
qscores <- sort(dataset[,1], decreasing=FALSE)
} else {
qscores <- sort(distribution, decreasing=FALSE)
if (length(distribution) != nrow(dataset) | (class(distribution)[1] != "numeric" & class(distribution) != "integer")) stop("Q method input: The distribution of items was set as non-forced and the distribution provided is not suitable (it is the wrong length or it is non numerical)")
}
zsc_n <- as.data.frame(zsc)
f <- 1
while (f <= length(floa)) {
n <- 1
while (n <= length(qscores)) {
#find which statement has the current qscore rank
statement <- order(zsc[,f])[[n]]
zsc_n[statement,f] <- qscores[[n]]
##using these qscores based on the initial rawdata values enables that the factor scores are exactly those allowed in the original Q-board data
n <- n+1
}
f <- f+1
}
colnames(zsc_n) <- paste("fsc_f",c(1:length(floa)),sep="")
#E. FACTOR CHARACTERISTICS
f_char <- qfcharact(loa, flagged, nqsorts, zsc, nfactors, floa)
#F. FINAL OUTPUTS
brief <- paste("Q-method analysis performed on ", date(), ". Original data: ", nstat, " statements, ", nqsorts, " Q-sorts. Number of factors: ",nfactors,". Rotation: ", rotation, ". Automatic flagging.", sep="")
qmethodresults <- list()
qmethodresults[[1]] <- brief
qmethodresults[[2]] <- dataset
qmethodresults[[3]] <- loa
qmethodresults[[4]] <- flagged
qmethodresults[[5]] <- zsc
qmethodresults[[6]] <- zsc_n
qmethodresults[[7]] <- f_char
names(qmethodresults) <- c("Summary", "Original data", "Q-sort factor loadings", "Flagged Q-sorts", "Statement z-scores", "Statement rounded scores", "Factor characteristics")
class(qmethodresults) <- "QmethodRes"
return(qmethodresults)
}
summary.QmethodRes <- function(object, ...) {
print(object[1], quote=FALSE)
print(object[6], quote=FALSE)
fch <- t(object[[7]][[1]])
rownames(fch) <- c(
"Average reliability coefficient",
"Number of loading Q-sorts",
"Eigenvalues",
"Percentage of explained variance",
"Composite reliability",
"Standard error of factor scores")
print(fch, quote=FALSE, digits=2)
}
qdc <- function(dataset, nfactors, zsc, sed) {
if (nfactors==1) {
qdc.res <- "Warning: Only one factor selected. No distinguishing and consensus statements will be calculated."
print(qdc.res, quote = FALSE)
} else {
# Distinguishing and consensus statements
# create data frame
comparisons <- combn(nfactors, 2, simplify=F)
comp <- vector()
for (i in 1:length(comparisons)) {
comp <- append(comp, paste("f", comparisons[[i]], collapse="_", sep=""), after = length(comp))
}
qdc1 <- data.frame(matrix(data=as.numeric(NA), ncol=length(comp), nrow=nrow(dataset), dimnames=list(row.names(dataset), comp)))
# differences in zsc between factors
for (n in 1:length(comp)) {
first <-  names(zsc)[grep(paste0("f", comparisons[[n]][1]),
names(zsc))]
second <- names(zsc)[grep(paste0("f", comparisons[[n]][2]),
names(zsc))]
qdc1[n] <- abs(zsc[first] - zsc[second])
}
qdc2 <- as.data.frame(qdc1)
# significant differences
for (n in 1:length(comp)) {
# find the threshold for the pair of factors
first <-  names(sed)[grep(paste0("f", comparisons[[n]][1]),
names(sed))]
second <- names(sed)[grep(paste0("f", comparisons[[n]][2]),
names(sed))]
sedth.01 <- sed[first, second]*2.58
sedth.05 <- sed[first, second]*1.96 # differences are significant when > 2.58*SED for p < .01, or the same value rounded upwards (Brown, 1980, pp.245)
qdc2[which(abs(qdc1[[n]]) <= sedth.05), n] <- ""
qdc2[which(abs(qdc1[[n]]) >  sedth.05), n] <- "*"
qdc2[which(abs(qdc1[[n]]) >  sedth.01), n] <- "**"
}
names(qdc2) <- paste0("sig.dif_",names(qdc2))
qdc2$dist.and.cons <- as.character(apply(qdc2, 1, function(x) sum(x!="")==0))
qdc2[which(qdc2$dist.and.cons == T), "dist.and.cons"] <- "Consensus"
if (nfactors == 2) {
qdc2[which(qdc2$dist.and.cons != "Consensus"), "dist.and.cons"] <- "Distinguishing"
}
if (nfactors > 2) {
qdc2[which(qdc2$dist.and.cons != "Consensus"), "dist.and.cons"] <- ""
for (i in 1:nfactors) {
varsin  <- names(qdc2)[grep(i, names(qdc2))]
varsout <- names(qdc2)[-grep(i, names(qdc2))]
varsout <- varsout[-which(varsout=="dist.and.cons")]
for (s in 1:nrow(qdc2)) {
if (sum(qdc2[s, varsin] != "") == length(varsin) & sum(qdc2[s, varsout] != "") == 0) qdc2[s, "dist.and.cons"] <- paste0("Distinguishes f",i, " only") else if (sum(qdc2[s, c(varsin, varsout)] != "") == length(qdc1)) qdc2[s, "dist.and.cons"] <- "Distinguishes all" else if (sum(qdc2[s, varsin] != "") == length(varsin) & sum(qdc2[s, varsout] != "") != 0 & sum(qdc2[s, c(varsin, varsout)] != "") != length(qdc1)) qdc2[s, "dist.and.cons"] <- paste0(qdc2[s, "dist.and.cons"], "Distinguishes f",i, " ", collapse="")
}
#The above loop assigns these values in the column dist.and.cons, according to the following rules:
# -- "Distinguishes f* only" when the differences of f* with all other factors are significant, AND all other differences are not.
# -- "Distinguishes all" when all differences are significant.
# -- "Distinguishes f*" when the differences of f* and all other factors are significant, AND some (but not all) of the other differences are significant.
# -- "" leaves empty those which do not fullfil any of the above conditions, i.e. are not consensus neither are clearly distinguishing any factor.
}
}
qdc.res <- cbind(qdc1, qdc2)
ord <- rep(1:length(qdc1), each=2)
ord[which(1:(length(qdc1)*2) %% 2 == 0)] <- ord[which(1:(length(qdc1)*2) %% 2 == 0)] + length(qdc1)
qdc.res <- qdc.res[c(length(qdc.res), ord)]
}
return(qdc.res)
}
#flags Q sorts automatically according to the given loadings matrix
qflag <- function(nqsorts, nstat, loa=loa) {
#FLAGGING CRITERIA:
# -- 1) qsorts which factor loading is higher than the threshold for pval >0.95, and
# -- 2) qsorts which square loading is higher than the sum of square loadings of the same q-sort in all other factors
thold.05 <- 1.96/sqrt(nstat)
loa_sq <- loa^2
flagged <- data.frame(cbind(1:nqsorts))
flagged[,1] <- as.logical(flagged[,1])
f <- 1
while (f <= length(loa)) {
n <- 1
while (n <= nqsorts) {
flagged[n,f] <- loa_sq[n,f] > (rowSums(loa_sq)[[n]]-loa_sq[n,f]) & abs(loa[n,f]) > thold.05
n <- n+1
}
f <- f+1
}
names(flagged) <- paste("flag_f",1:length(loa), sep="")
row.names(flagged) <- row.names(loa)
return(flagged)
}
qfcharact <- function(loa, flagged, nqsorts, zsc, nfactors, floa, av_rel_coef=0.800) {
loa_sq <- loa^2
#number of loading q-sorts
nload <- colSums(flagged)
#Eigenvalues
eigenvals <- colSums(loa_sq)
#Total explained variance
expl_var <- 100*(eigenvals/nqsorts)
#Reliability
reliability <- av_rel_coef*nload/(1+(nload-1)*av_rel_coef)
#Standard Error of Factor Scores
se_fscores <- sapply(zsc, sd)*sqrt(1-reliability)
#FACTOR MATRIXES
#correlation among factors
f_cor <- cor(zsc)
#SE of differences
sed <- matrix(data = NA, nrow = nfactors, ncol = nfactors)
colnames(sed) <- paste("f", 1:nfactors, sep="")
row.names(sed) <- paste("f", 1:nfactors, sep="")
f <- 1
while (f <= length(floa)) {
g <- 1
while (g <= length(floa)) {
sed[f,g] <- sqrt(se_fscores[[f]]^2 + se_fscores[[g]]^2)
g <- g+1
}
f <- f+1
}
#Bind all together
f_char <- list()
f_char[[1]] <- cbind(av_rel_coef, nload, eigenvals, expl_var, reliability, se_fscores)
row.names(f_char[[1]]) <- paste("f",1:length(loa), sep="")
f_char[[2]] <- f_cor
f_char[[3]] <- sed
names(f_char) <- cbind("Average reliability coefficient, Number of loading Q-sorts, Eigenvalues, Percentage of explained variance, Composite reliability, Standard error of factor scores", "Correlation coefficients between factors z-scores", "Standard errors of differences")
return(f_char)
}
data(lipset)
load("~/Mahaigaina/package2/qmethod/data/lipset.rda")
library(psych)
qmethod(lipset, 3, 26, 32, rotation="varimax", forced=T, distribution=NA)
qmethod(lipset, 3, 26, 33, rotation="varimax", forced=T, distribution=NA)
str(lipset)
qmethod(lipset, 3, 33, 9, rotation="varimax", forced=T, distribution=NA)
results<- qmethod(lipset, 3, 33, 9, rotation="varimax", forced=T, distribution=NA)
class(results)
plot(results)
install.packages("MASS")
install.packages("survival", "KernSmooth", "class", "nnet", "spatial")
install.packages("survival")
install.packages(KernSmooth")
""
install.packages("KernSmooth")
install.packages(class")
""
install.packages("class")
install.packages("nnet")
install.packages("spatial")
data(lipset)
results <- qmethod(lipset, nfactors=3, nstat=33,
nqsorts=9, rotation="varimax")
title <- paste0("Q method z-scores, lipset dataset.\n
3 factors, PCA, varimax. Printed on ", Sys.Date())
title
plot(results, main=title)
title <- paste0("Q method z-scores, lipset dataset.\n 3 factors, PCA, varimax. Printed on ", Sys.Date())
plot(results, main=title)
plot(results, main=title, sub="test")
results <- qmethod(lipset, nfactors=3, nstat=33,
nqsorts=9, rotation="varimax")
title <- "Q method z-scores, lipset dataset"
subtitle <- paste0("Three factors, PCA, varimax. Printed on ", Sys.Date())
plot(results, main=title, sub=subtitle)
remove.packages("GPArotation")
remove.packages("psych")
remove.packages("sandwich")
install.packages("~/Mahaigaina/package2/qmethod_1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Deskargak/sandwich_2.3-0.tar.gz", repos = NULL, type = "source")
install.packages("sandwich")
install.packages(c("psych", "GPArotation"))
install.packages("~/Mahaigaina/package2/qmethod_1.0.tar.gz", repos = NULL, type = "source")
library("qmethod", lib.loc="/home/aiora/R/x86_64-pc-linux-gnu-library/3.1")
?qmethod
data(lipset)
results <- qmethod(lipset, nfactors=3, nstat=33,
nqsorts=9, rotation="varimax")
summary(results)
results #shows all results
?qzscores
?qfcharact
?qdc
?qmethod-package
?qmethod.package
help(package=qmethod)
?"qmethod-package"
library(qmethod)
?qmethod
library(qmethod)
?"qmethod-package"
library(qmethod)
?"qmethod-package"
library(qmethod)
?"qmethod-package"
help(package="qmethod")
?import.pqmethod
library(qmethod)
}qmethod
?qmethod
?qzscores
library(qmethod)
data(lipset)
?lipset
?qmethod
results <- qmethod(lipset, nfactors=3, nstat=33,
nqsorts=9, rotation="varimax")
results <- qmethod(lipset, nfactors=3, nstat=33,
nqsorts=9, rotation="oblimin")
results <- qmethod(lipset, nfactors=3, nstat=33,
nqsorts=9, rotation="none")
rotation="oblimin"
dataset=lipset
nfactors=3
nstat=33
nqsorts=9
forced=T
distribution=NA
thold.01 <- 2.58/sqrt(nstat)
thold.05 <- 1.96/sqrt(nstat)
#check that the input data is correct
if (nqsorts!=ncol(dataset)) stop("Q method input: The number of Q sorts introduced does not match with the number of columns of the data frame or matrix") else if (nstat!=nrow(dataset)) stop("Q method input: The number of statements introduced does not match with the number of rows of the data frame or matrix.") else if (!is.integer(as.matrix(dataset))) stop("Q method input: The data frame or matrix entered has non numeric values.") else {
loa <- as.data.frame(unclass(principal(dataset, nfactors=nfactors, rotate=rotation)$loadings)) #PCA from {psych} for factor loadings
names(loa) <- paste0("f", 1:length(loa))
# The following depends on the qmethod functions: qflag, qzscores, qfcharact, qdc
flagged <- qflag(nqsorts, nstat, loa=loa)
qmethodresults <- qzscores(dataset, nfactors, nstat, nqsorts, rotation="varimax", flagged=flagged, loa=loa, forced=forced, distribution=distribution)
qmethodresults[[8]] <- qdc(dataset, nfactors, zsc=qmethodresults[[5]], sed=as.data.frame(qmethodresults[[7]][[3]]))
names(qmethodresults)[8] <- "Distinguishing and consensus statements"
}
print(qmethodresults$Summary)
return(qmethodresults)
library(psych)
loa <- as.data.frame(unclass(principal(dataset, nfactors=nfactors, rotate=rotation)$loadings)) #PCA from {psych} for factor loadings
rotation
loa
as.data.frame(unclass(principal(dataset, nfactors=nfactors, rotate="varimax")$loadings)) #PCA from {psych} for factor loadings
qmethodresults <- qzscores(dataset, nfactors, nstat, nqsorts, rotation=rotation, flagged=flagged, loa=loa, forced=forced, distribution=distribution)
rotation
results
results$`Q-sort factor loadings`
results$`Q-sort factor loadings`
as.data.frame(unclass(principal(dataset, nfactors=nfactors, rotate="oblimin")$loadings)
)
as.data.frame(unclass(principal(dataset, nfactors=nfactors, rotate="oblimin")$loadings))
as.data.frame(unclass(principal(dataset, nfactors=nfactors, rotate="varimax")$loadings)
)
results <- qmethod(lipset, nfactors=3, nstat=33,
nqsorts=9, rotation="varimax")
dataset
nfactors
results$`Q-sort factor loadings`
as.data.frame(unclass(principal(dataset, nfactors=nfactors, rotate="oblimin")$loadings))
as.data.frame(unclass(principal(dataset, nfactors=nfactors, rotate="varimax")$loadings))
results <- qmethod(lipset, nfactors=3, nstat=33,
nqsorts=9, rotation="oblimin")
results$`Q-sort factor loadings`
library(qmethod)
?qmethod
lipsettext <- read.delim("~/Copy/Mahaigaina/lipsettext", header=F, quote="")
View(lipsettext)
names(lipsettext)[[1]]
names(lipsettext) <- c("statement", "text")
lipsettext <- read.delim("~/Copy/Mahaigaina/lipsettext", header=F, quote="")
View(lipsettext)
names(lipsettext) <- c("statement", "text")
View(lipsettext)
View(lipsettext)
lipsettext[[1]] <- paste0("sta_", 1:nrow(lipsettext))
View(lipsettext)
View(lipsettext)
?save
getwd()
setwd("~/Copy/Mahaigaina/package2/qmethod/data")
load(lipset)
load("lipset.rda")
lipset
lipsettext
ldata <- lipset
ltext <- lipsettext
lipset <-list()
lipset[[1]] <- ldate
lipset[[1]] <- ldata
lipset[[ltext]] <- ltext
lipset[[2]] <- ltext
lipset
names(lipset) <- c("ldata", "ltext")
str(lipset)
lipset[[2]][[1]] <- as.string(lipset[[2]][[1]])
lipset[[2]][[1]] <- as.character(lipset[[2]][[1]])
str(lipset)
lipset[[2]][[2]] <- as.character(lipset[[2]][[2]])
str(lipset)
lipset$ltext
getwd()
save(lipset, file="lipset.rda")
load("lipset.rda")
lipset[[1]]
results <- qmethod(lipset[[1]], nfactors=3, nstat=33,
nqsorts=9, rotation="varimax")
library(psych)
loa <- as.data.frame(unclass(principal(lipset[[1]],
nfactors=3, rotate="varimax")$loadings))
flagged <- qflag(nqsorts=9, nstat=33, loa=loa)
qmzsc <- qzscores(lipset[[1]], nstat=33, nfactors=3, nqsorts=9,
flagged=flagged, loa=loa,
rotation="varimax")
qmzsc
library(psych)
?principal
?princomp
?cor
data(lipset)
results <- qmethod(lipset, nfactors=3, nstat=33,
nqsorts=9, rotation="varimax")
class(results)
format(results[[8]], digits=2)
format(results[[8]], digits=2, nsmall=2)
?format
format(results[[8]], digits=1, nsmall=2)
format(results[[8]], nsmall=2)
format(results[[8]], digits=0, nsmall=2)
round(results[[8]])
?round
format(results[[8]], digits=1, nsmall=2)
results[[6]]
# Merge the statements with their actual text
scores <- merge(lipset[[2]], results[[6]], by=c())
?merge
load("~/Mahaigaina/package2/qmethod/data/lipset.rda")
str(lipset)
rownames(lipset[[2]]) <- lipset[[2]][[1]]
lipset[[2]]
lipset[[2]][[1]] <- NULL
lipset[[2]]
str(lipset)
getwd()
save(lipset, file="lipset.rda")
load("~/Mahaigaina/package2/qmethod/data/lipset.rda")
str(lipset)
?merge
scores <- merge(lipset[[2]], results[[6]], by=Row.names)
scores <- merge(lipset[[2]], results[[6]], by=row.names)
scores <- merge(lipset[[2]], results[[6]], by=rownames)
lipset[[2]]
results[[6]]
scores <- merge(lipset[[2]], results[[6]], by="Row.names")
scores <- merge(lipset[[2]], results[[6]], by="row.names")
scores
str(scores)
scores <- cbind(lipset[[2]], results[[6]])
str(scores)
scores
View(scores)
scores <- cbind(results[[6]], lipset[[2]])
scores
?order
?rank
?sort
order(scores)
order(scores[1])
scores[order(scores[1]), ]
scores[order(scores[1], decreasing=F), ]
scores[order(scores[1], decreasing=T), ]
str(results)
for (i in 1: length(results[[3]])) {
scores[order(scores[i], decreasing=T), ]
}
for (i in 1: length(results[[3]])) {
print(scores[order(scores[i], decreasing=T), ])
}
?print
for (i in 1: length(results[[3]])) {
print(scores[order(scores[i], decreasing=T), ], width=20)
}
for (i in 1: length(results[[3]])) {
print(scores[order(scores[i], decreasing=T), ], width=10)
}
for (i in 1: length(results[[3]])) {
View(scores[order(scores[i], decreasing=T), ])
}
?View
for (i in 1: length(results[[3]])) {
View(scores[order(scores[i], decreasing=T), ], title=paste0("Order for f", i))
}
length(results[[3]])
getwd()
